from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, reply_keyboard_remove
from keyboards import inline_keyboard, keyboards
from database import requests1 as db
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database.database import async_session
from models.models import Users, FilterLogs
from sqlalchemy import select, update



router = Router()
choosed_filters = []
class FrequenceVacancy(StatesGroup):
    hours = State()

class FreqeunceViews(StatesGroup):
    hours = State()

class ChangeFilter(StatesGroup):
    filter = State()
    option_to_change = State()
    salary = State()
    city = State()
    schedule = State()
    experience = State()
    test = State()


@router.callback_query(F.data == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def user_options_response(callback: CallbackQuery):
    text = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n' \
           '–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –≥–¥–µ –º–æ–∂–µ—à—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç –¥–ª—è —Ç–µ–±—è. –ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è?' \
           '\n1Ô∏è‚É£–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–∞–∫–∞–Ω—Å–∏–π ‚Äî –Ω–∞—Å—Ç—Ä–æ–π, –∫–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.' \
           '\n2Ô∏è‚É£–ò–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π ‚Äî –∏–∑–º–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏.' \
           '\n3Ô∏è‚É£–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ä–µ–∑—é–º–µ ‚Äî –≤—ã–±–µ—Ä–∏, –∫–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –≤ —Ç–≤–æ—ë–º —Ä–µ–∑—é–º–µ. ' \
           '\n4Ô∏è‚É£–í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö ‚Äî —Ä–µ—à–∏, —Ö–æ—á–µ—à—å –ª–∏ —Ç—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö.'
    await callback.message.answer(text = text,
                                  reply_markup=inline_keyboard.create_inline_kb(1, '–ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–∞–∫–∞–Ω—Å–∏–π',
                                                                                '–í–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π',
                                                                                '–§–∏–ª—å—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                                                                                '–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ä–µ–∑—é–º–µ',
                                                                                '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤',
                                                                                '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

@router.callback_query(F.data == '–ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–∞–∫–∞–Ω—Å–∏–π', StateFilter(None))
async def freq_vacancy_notifications(callback: CallbackQuery, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(select(Users.new_vacancies_notification).where(Users.id == callback.from_user.id))
        result = result.fetchone()
    if result[0] == False:
        await callback.message.answer('üö´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –µ—â—ë –Ω–µ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã!')
    else:
        await callback.message.answer('–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                                      '–Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –±—ã –ø—Ä–µ–¥–ø–æ—á–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –Ω–∞–ø–∏—à–∏—Ç–µ 24. –î–ª—è –¥–≤—É—Ö —Ä–∞–∑ –≤ –¥–µ–Ω—å —É–∫–∞–∂–∏—Ç–µ 12 '
                                      '—á–∞—Å–æ–≤, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å.')
        await state.set_state(FrequenceVacancy.hours)

@router.message(F.text, FrequenceVacancy.hours)
async def vacancy_freq_hours(message: Message, state: FSMContext):
    if int(message.text) >= 24:
        await message.answer('–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –±–æ–ª—å—à–µ <b>24 —á–∞—Å–æ–≤</b<')
    else:
        async with async_session() as session:
            await session.execute(update(Users).where(Users.id == message.from_user.id).values(
                freq_new_vacancy_notifications=int(message.text)))
            await session.commit()
        await message.answer(f'–í—ã –∏–∑–º–µ–Ω–∏–∏–ª–∏ —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ {message.text} —á–∞—Å–æ–≤(–∞)')
        await state.clear()

@router.callback_query(F.data == '–í–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π')
async def off_on_vacancy_notifications(callback: CallbackQuery):
    async with async_session() as session:
        filters_with_true = await session.execute(select(FilterLogs.for_notifications).where(FilterLogs.for_notifications == True).where(FilterLogs.user_id == callback.from_user.id))
        filters_with_true = filters_with_true.fetchall()
    if filters_with_true:
        async with async_session() as session:
            result = await session.execute(select(Users.new_vacancies_notification).where(Users.id == callback.from_user.id))
            result = result.fetchone()
            if result[0] == False:
                await session.execute(update(Users).where(Users.id == callback.from_user.id).values(new_vacancies_notification = True))
                await session.commit()
                await callback.message.answer('‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏!')
            else:
                await session.execute(update(Users).where(Users.id == callback.from_user.id).values(new_vacancies_notification = False))
                await session.commit()
                await callback.message.answer('üö´ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã!')
    else:
        await callback.message.answer('–£ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∏–∫–∞–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')


@router.callback_query(F.data == '–§–∏–ª—å—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
async def filter_notifications(callback: CallbackQuery):
    await callback.message.answer('–û–ø—Ü–∏–∏', reply_markup=inline_keyboard.create_inline_kb(2, '–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã'))

@router.callback_query(F.data == '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã')
async def change_filters_notifications(callback: CallbackQuery):
    if_filters = await db.manage_filter_logs(callback.from_user.id, True)
    print(if_filters)
    c = 1
    async with async_session() as session:
        count_true_filters = await session.execute(select(FilterLogs.user_id).where(FilterLogs.user_id == callback.from_user.id).where(FilterLogs.for_notifications == True))
        count_true_filters = count_true_filters.fetchall()
    if len(count_true_filters) == 3:
        await callback.message.answer('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 3 –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞. –ß—Ç–æ–±—ã –∏—Ö –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞–º –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.')
    else:
        async with async_session() as session:
            if not if_filters:
                await callback.message.answer('üö´ –í—ã –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é ¬´–ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π¬ª. (—ç—Ç–æ —Ç–∞–∫–∂–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–¥–µ –∏–∑–º–µ–Ω—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π /–≤–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª—è—Ö –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏)')
            else:
                for i in if_filters:
                    is_true_notifications = await session.execute(select(FilterLogs.for_notifications).where(FilterLogs.user_id == callback.from_user.id))
                    is_true_notifications = is_true_notifications.fetchone()
                    if is_true_notifications[0] == False:
                        await callback.message.answer(text=f'<b>{c}</b>\n–ó–∞–ø—Ä–æ—Å: {i[0]}\n–ó–∞—Ä–ø–ª–∞—Ç–∞: {i[1]}\n–ì–æ—Ä–æ–¥: {i[2]}\n–ì—Ä–∞—Ñ–∏–∫: {i[3]}\n–û–ø—ã—Ç: {i[4]}\n–ù–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–∞: {i[5]}\n–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏: {i[6]}')
                        c += 1
        await callback.message.answer('–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥—É—Ç –∏—Å–∫–∞—Ç—å—Å—è –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n'
                                      '–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–∏—Ç—å', reply_markup=inline_keyboard.create_inline_kb(1, *[str(i+1) for i in range(len(if_filters))], '–ó–∞–≤–µ—Ä—à–∏—Ç—å'))

@router.callback_query(F.data == '–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã')
async def clear_filters_notifications(callback: CallbackQuery):
    async with async_session() as session:
        await session.execute(update(FilterLogs).where(FilterLogs.user_id == callback.from_user.id).values(for_notifications = False))
        await session.commit()
    await callback.message.answer('–í—ã –æ—á–∏—Å—Ç–∏–ª–∏ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')

@router.callback_query(F.data.in_(['1','2','3','4','5', '–ó–∞–≤–µ—Ä—à–∏—Ç—å']))
async def select_filters_to_notifications(callback: CallbackQuery):
    global choosed_filters
    if callback.data in ['1','2','3','4','5']:
        choosed_filters.append(callback.data)
        print(choosed_filters)
    if len(choosed_filters) == 3:
        await callback.message.delete()
        await callback.message.answer('–í—ã –æ–±–Ω–æ–≤–∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π')
        for i in choosed_filters:
            async with async_session() as session:
                filter_id = int(i)
                filter = await session.execute(select(FilterLogs.created_at).where(FilterLogs.user_id == callback.from_user.id).order_by(FilterLogs.created_at))
                filter = filter.fetchall()
                filter = filter[filter_id - 1]
                await session.execute(update(FilterLogs).where(FilterLogs.user_id == callback.from_user.id).where(FilterLogs.created_at == filter[-1]).values(for_notifications = True))
                await session.commit()
        await callback.bot.delete_message(chat_id = callback.from_user.id, message_id=callback.message.message_id - 1)
        await callback.bot.delete_message(chat_id = callback.from_user.id, message_id=callback.message.message_id - 2)
        await callback.bot.delete_message(chat_id = callback.from_user.id, message_id=callback.message.message_id - 3)
        await callback.bot.delete_message(chat_id = callback.from_user.id, message_id=callback.message.message_id - 4)
        await callback.bot.delete_message(chat_id = callback.from_user.id, message_id=callback.message.message_id - 5)
        await callback.bot.delete_message(chat_id = callback.from_user.id, message_id=callback.message.message_id - 6)
        choosed_filters = []
    if callback.data == '–ó–∞–≤–µ—Ä—à–∏—Ç—å':
        await callback.message.delete()
        await callback.message.answer('–í—ã –æ–±–Ω–æ–≤–∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π')
        for i in choosed_filters:
            print(i)
            async with async_session() as session:
                filter_id = int(i)
                filter = await session.execute(select(FilterLogs.created_at).where(FilterLogs.user_id == callback.from_user.id).order_by(FilterLogs.created_at))
                filter = filter.fetchall()
                filter = filter[filter_id - 1]
                await session.execute(update(FilterLogs).where(FilterLogs.user_id == callback.from_user.id).where(FilterLogs.created_at == filter[-1]).values(for_notifications = True))
                await session.commit()
        await callback.bot.delete_message(chat_id = callback.from_user.id, message_id=callback.message.message_id - 1)
        await callback.bot.delete_message(chat_id = callback.from_user.id, message_id=callback.message.message_id - 2)
        await callback.bot.delete_message(chat_id = callback.from_user.id, message_id=callback.message.message_id - 3)
        await callback.bot.delete_message(chat_id = callback.from_user.id, message_id=callback.message.message_id - 4)
        await callback.bot.delete_message(chat_id = callback.from_user.id, message_id=callback.message.message_id - 5)
        await callback.bot.delete_message(chat_id = callback.from_user.id, message_id=callback.message.message_id - 6)
        choosed_filters = []

@router.callback_query(F.data == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤', StateFilter(None))
async def change_filter_options(callback: CallbackQuery, state: FSMContext):
    if_filters = await db.manage_filter_logs(callback.from_user.id, True)
    c = 1
    if not if_filters:
        await callback.message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä–æ–≤')
    else:
        for i in if_filters:
            await callback.message.answer(text=f'<b>{c}</b>\n–ó–∞–ø—Ä–æ—Å: {i[0]}\n–ó–∞—Ä–ø–ª–∞—Ç–∞: {i[1]}\n–ì–æ—Ä–æ–¥: {i[2]}\n–ì—Ä–∞—Ñ–∏–∫: {i[3]}\n–û–ø—ã—Ç: {i[4]}\n–ù–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–∞: {"True" if i[5] == False else "False"}\n–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏: {i[6]}',
                                          reply_markup=inline_keyboard.create_inline_kb(2, '–ò–∑–º–µ–Ω–∏—Ç—å', '–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ'))
            c += 1
    await state.set_state(ChangeFilter.filter)

@router.callback_query(F.data.in_(['–ò–∑–º–µ–Ω–∏—Ç—å', '–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ']), ChangeFilter.filter)
async def change_salary(callback: CallbackQuery, state: FSMContext):
    if callback.data == '–ò–∑–º–µ–Ω–∏—Ç—å':
        await state.update_data(filter_number = callback.message.text[0])
        await callback.message.answer('–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?',
                                      reply_markup=inline_keyboard.create_inline_kb(2, '–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', '–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø—ã—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–∞'))
        await state.set_state(ChangeFilter.option_to_change)
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ':
        await state.clear()

@router.callback_query(F.data.in_(['–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', '–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø—ã—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–∞']), ChangeFilter.option_to_change)
async def change_option(callback: CallbackQuery, state: FSMContext):
    await state.update_data(option_to_change = callback.data)
    if callback.data == '–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É':
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 30000-50000 –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞',
                                  reply_markup=keyboards.create_standard_kb(2, '–æ—Ç 50 000 —Ä', '–æ—Ç 70 000 —Ä', '–æ—Ç 100 000 —Ä', '–æ—Ç 200 000 —Ä'))
        await state.set_state(ChangeFilter.salary)
    if callback.data == '–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥':
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≥–æ—Ä–æ–¥.')
        await state.set_state(ChangeFilter.city)
    if callback.data == '–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫':
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫', reply_markup=keyboards.create_standard_kb(2, '–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å', '–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫', '–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫', '–í–∞—Ö—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥'))
        await state.set_state(ChangeFilter.schedule)
    if callback.data == '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø—ã—Ç':
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫', reply_markup=keyboards.create_standard_kb(2, '–ù–µ—Ç –æ–ø—ã—Ç–∞', '–û—Ç 1 –≥–æ–¥–∞ –¥–æ 3 –ª–µ—Ç', '–û—Ç 3 –¥–æ 6 –ª–µ—Ç', '–ë–æ–ª–µ–µ 6 –ª–µ—Ç'))
        await state.set_state(ChangeFilter.experience)
    if callback.data == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–∞':
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –Ω–∞–ª–∏—á–∏—è —Ç–µ—Å—Ç–∞', reply_markup=keyboards.create_standard_kb(2, '–î–∞', '–ù–µ—Ç'))
        await state.set_state(ChangeFilter.test)

@router.message(F.text, StateFilter(*[ChangeFilter.salary, ChangeFilter.city, ChangeFilter.schedule, ChangeFilter.experience, ChangeFilter.test]))
async def change_choosed_option(message: Message, state: FSMContext):
    if await state.get_state() == ChangeFilter.salary:
        filters = await db.manage_filter_logs(message.from_user.id, True)
        id = await state.get_data()
        filters = filters[int(id['filter_number']) - 1]
        if '_' not in message.text:
            async with async_session() as session:
                await session.execute(update(FilterLogs).values(salary = message.text.split(' ')[1] + message.text.split(' ')[2]).
                                      where(FilterLogs.text == filters[0], FilterLogs.salary == filters[1], FilterLogs.city == filters[2],
                                            FilterLogs.schedule == filters[3], FilterLogs.experience == filters[4], FilterLogs.test == filters[5]))
                await session.commit()
        else:
            async with async_session() as session:
                await session.execute(update(FilterLogs).values(salary = message.text.split('-')[0]).
                                      where(FilterLogs.text == filters[0], FilterLogs.salary == filters[1], FilterLogs.city == filters[2],
                                            FilterLogs.schedule == filters[3], FilterLogs.experience == filters[4], FilterLogs.test == filters[5]))
                await session.commit()
        await message.answer(f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–∞ {message.text}', reply_markup=reply_keyboard_remove.ReplyKeyboardRemove())
        await state.clear()
    if await state.get_state() == ChangeFilter.city:
        filters = await db.manage_filter_logs(message.from_user.id, True)
        id = await state.get_data()
        filters = filters[int(id['filter_number']) - 1]
        async with async_session() as session:
            await session.execute(
                update(FilterLogs).values(city=message.text).
                where(FilterLogs.text == filters[0], FilterLogs.salary == filters[1], FilterLogs.city == filters[2],
                      FilterLogs.schedule == filters[3], FilterLogs.experience == filters[4],
                      FilterLogs.test == filters[5]))
            await session.commit()
        await message.answer(f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≥–æ—Ä–æ–¥ –Ω–∞ {message.text}', reply_markup=reply_keyboard_remove.ReplyKeyboardRemove())
        await state.clear()
    if await state.get_state() == ChangeFilter.schedule:
        filters = await db.manage_filter_logs(message.from_user.id, True)
        id = await state.get_data()
        filters = filters[int(id['filter_number']) - 1]
        async with async_session() as session:
            await session.execute(
                update(FilterLogs).values(schedule=message.text).
                where(FilterLogs.text == filters[0], FilterLogs.salary == filters[1], FilterLogs.city == filters[2],
                      FilterLogs.schedule == filters[3], FilterLogs.experience == filters[4],
                      FilterLogs.test == filters[5]))
            await session.commit()
        await message.answer(f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ {message.text}', reply_markup=reply_keyboard_remove.ReplyKeyboardRemove())
        await state.clear()
    if await state.get_state() == ChangeFilter.experience:
        filters = await db.manage_filter_logs(message.from_user.id, True)
        id = await state.get_data()
        filters = filters[int(id['filter_number']) - 1]
        async with async_session() as session:
            await session.execute(
                update(FilterLogs).values(experience=message.text).
                where(FilterLogs.text == filters[0], FilterLogs.salary == filters[1], FilterLogs.city == filters[2],
                      FilterLogs.schedule == filters[3], FilterLogs.experience == filters[4],
                      FilterLogs.test == filters[5]))
            await session.commit()
        await message.answer(f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –æ–ø—ã—Ç–∞ –Ω–∞ {message.text}', reply_markup=reply_keyboard_remove.ReplyKeyboardRemove())
        await state.clear()
    if await state.get_state() == ChangeFilter.test:
        if message.text == '–î–∞':
            filters = await db.manage_filter_logs(message.from_user.id, True)
            id = await state.get_data()
            filters = filters[int(id['filter_number']) - 1]
            async with async_session() as session:
                await session.execute(
                    update(FilterLogs).values(test=True).where(FilterLogs.text == filters[0], FilterLogs.salary == filters[1], FilterLogs.city == filters[2],
                          FilterLogs.schedule == filters[3], FilterLogs.experience == filters[4],
                          FilterLogs.test == filters[5]))
                await session.commit()
            await message.answer(f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –Ω–∞–ª–∏—á–∏—è —Ç–µ—Å—Ç–∞ –Ω–∞ {message.text}', reply_markup=reply_keyboard_remove.ReplyKeyboardRemove())
            await state.clear()
        if message.text == '–ù–µ—Ç':
            filters = await db.manage_filter_logs(message.from_user.id, True)
            id = await state.get_data()
            filters = filters[int(id['filter_number']) - 1]
            async with async_session() as session:
                await session.execute(
                    update(FilterLogs).values(test=False).where(FilterLogs.text == filters[0], FilterLogs.salary == filters[1], FilterLogs.city == filters[2],
                          FilterLogs.schedule == filters[3], FilterLogs.experience == filters[4],
                          FilterLogs.test == filters[5]))
                await session.commit()
            await message.answer(f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –Ω–∞–ª–∏—á–∏—è —Ç–µ—Å—Ç–∞ –Ω–∞ {message.text}', reply_markup=reply_keyboard_remove.ReplyKeyboardRemove())
            await state.clear()


@router.callback_query(F.data == '–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ä–µ–∑—é–º–µ', StateFilter(None))
async def freq_monitoring_resumes_request(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                                  '–Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –±—ã –ø—Ä–µ–¥–ø–æ—á–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –Ω–∞–ø–∏—à–∏—Ç–µ 24. –î–ª—è –¥–≤—É—Ö —Ä–∞–∑ –≤ –¥–µ–Ω—å —É–∫–∞–∂–∏—Ç–µ 12 '
                                  '—á–∞—Å–æ–≤, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å.')
    await state.set_state(FreqeunceViews.hours)


@router.message(F.text, FreqeunceViews.hours)
async def freq_monitoring_resumes_get(message: Message, state: FSMContext):
    if int(message.text) >= 24:
        await message.answer('–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –±–æ–ª—å—à–µ <b>24 —á–∞—Å–æ–≤</b>. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.')
    else:
        async with async_session() as session:
            await session.execute(update(Users).values(monitoring_resume_interval=int(message.text)).where(
                Users.id == message.from_user.id))
            await session.commit()
        await message.answer(f'–í—ã –æ–±–Ω–æ–≤–∏–ª–∏ —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö —Ä–µ–∑—é–º–µ –Ω–∞ {message.text}')
    await state.clear()









