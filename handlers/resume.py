from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, FSInputFile
from keyboards import inline_keyboard
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from api.work_with_resumes import WorkWithResumes
from authlib.oauth2 import OAuth2Client
import httpx
from database.database import async_session
from models.models import Users, UserResumes
from sqlalchemy import select, update, insert



router = Router()

HH_CLIENT_ID = "K30VSKO0FJ0NGKN2N2RQJA0Q7LUOJJM5DNEM5JHFU47ADM16IPGEBSRO59DAVHPQ"
HH_CLIENT_SECRET = "TIJ2QVINV13LVF9TMPJ5T4Q1DVRJU0I44SHS4HTAMO6F3JGSH5GRD3VG9I1VO9DV"
HH_AUTHORIZATION_URL = "https://hh.ru/oauth/authorize"
HH_TOKEN_URL = "https://hh.ru/oauth/token"
HH_REDIRECT_URI = "http://localhost:8000/redirect"
session = httpx.AsyncClient()
oauth_client = OAuth2Client(client_id=HH_CLIENT_ID, client_secret=HH_CLIENT_SECRET, session=session)
choosed_resume = ''


class ResumesChoose(StatesGroup):
    resume = State()


@router.callback_query(F.data == '–†–∞–±–æ—Ç–∞ —Å —Ä–µ–∑—é–º–µ', StateFilter(None))
async def resume_check_token(callback: CallbackQuery, state: FSMContext):
    async with async_session() as session:
        if_token = await session.execute(select(Users.token).where(Users.id == callback.from_user.id))
        if_token = if_token.fetchone()
    if if_token[0] != None:
        all_resumes = await WorkWithResumes(if_token[0]).get_all_resumes()
        titles = list(all_resumes.keys())
        await callback.message.answer('‚úÖ –ü–æ–ª—É—á–∏–ª —Ç–≤–æ–∏ —Ä–µ–∑—é–º–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.', reply_markup=inline_keyboard.create_inline_kb(1,*titles))
        await state.set_state(ResumesChoose.resume)
    else:
        authorization_url = oauth_client.create_authorization_url(HH_AUTHORIZATION_URL, redirect_uri=HH_REDIRECT_URI, state=callback.from_user.id)
        await callback.message.answer(f'–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –Ω–∞—à–µ–º—É –±–æ—Ç—É –¥–æ—Å—Ç—É–ø –∫ –í–∞—à–∏–º '
                                      f'–¥–∞–Ω–Ω—ã–º –Ω–∞ —Å–∞–π—Ç–µ hh. –ü—Ä–æ–¥–æ–ª–∂–∞—è –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–∑ –¥–∞–Ω–Ω—ã—Ö. <a href="{authorization_url[0]}">–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å–ª—ã–∫–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç—É</a>', parse_mode='HTML')
        while True:
            async with async_session() as session:
                if_token = await session.execute(select(Users.token).where(Users.id == callback.from_user.id))
                if_token = if_token.fetchone()
            if if_token[0] != None:
                break
        await callback.message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å.')
        all_resumes = await WorkWithResumes(if_token[0]).get_all_resumes()
        titles = list(all_resumes.keys())
        ids = list(all_resumes.values())
        for i in range(len(titles)):
            await session.execute(insert(UserResumes).values(user_id = callback.from_user.id, title = titles[i], resume_id = ids[i]))
            await session.commit()
        await callback.message.answer('‚úÖ –ü–æ–ª—É—á–∏–ª —Ç–≤–æ–∏ —Ä–µ–∑—é–º–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.', reply_markup=inline_keyboard.create_inline_kb(1, *titles))
        await state.set_state(ResumesChoose.resume)


@router.callback_query(F.data, ResumesChoose.resume)
async def work_with_resume(callback: CallbackQuery, state: FSMContext):
    global choosed_resume
    buttons = ['–í–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ', '–í–∫–ª/–≤—ã–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ä–µ–∑—é–º–µ', '–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—é–º–µ' , '–£–≤–∏–¥–µ—Ç—å –ø—Ä—Å–º–æ—Ç—Ä—ã —Ä–µ–∑—é–º–µ', '–í–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ']
    datas = ['on_autoupdate_resume', 'on_resume_monitor', 'update_resume', 'look_views', 'back']
    await callback.message.edit_text(text=f'{callback.data}',
                                     reply_markup=inline_keyboard.work_with_resume(1, buttons, datas))
    choosed_resume = callback.data
    await state.clear()


@router.callback_query(F.data == 'update_resume')
async def update_resume(callback: CallbackQuery):
    async with async_session() as session:
        if_token = await session.execute(select(Users.token).where(Users.id == callback.from_user.id))
        if_token = if_token.fetchone()
    response = await WorkWithResumes(if_token[0]).update_resume(callback.message.text)
    if response.status_code == 429:
        await callback.message.answer('üö´–ï—â—ë —Ä–∞–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!')
    else:
        await callback.message.answer('‚úÖ–í–∞—à–µ —Ä–µ–∑—é–º–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')

views_pagination = 0
all_views = None
@router.callback_query(F.data == 'look_views')
async def look_views(callback: CallbackQuery):
    global views_pagination, all_views
    async with async_session() as session:
        if_token = await session.execute(select(Users.token).where(Users.id == callback.from_user.id))
        if_token = if_token.fetchone()
    all_views = await WorkWithResumes(if_token[0]).look_views(callback.message.text)
    first_page = '\n'.join(all_views[views_pagination])
    await callback.message.edit_text(text = f'–í–∞—à–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏:\n\n{first_page}', inline_message_id=callback.inline_message_id,
                                     reply_markup=inline_keyboard.create_inline_kb(1, '–û–±—Ä–∞—Ç–Ω–æ', '–ï—â–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã ->'), parse_mode='HTML')

@router.callback_query(F.data == '–ï—â–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã ->')
async def more_views(callback: CallbackQuery):
    global views_pagination, all_views
    views_pagination += 1
    page = '\n'.join(all_views[views_pagination])
    await callback.message.edit_text(text = f'–í–∞—à–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏:\n\n{page}', inline_message_id=callback.inline_message_id,
                                     reply_markup=inline_keyboard.create_inline_kb(1, '–û–±—Ä–∞—Ç–Ω–æ', '–ï—â–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã ->'), parse_mode='HTML')


@router.callback_query(F.data == '–û–±—Ä–∞—Ç–Ω–æ')
async def back_from_views(callback: CallbackQuery):
    global choosed_resume, all_views, views_pagination
    buttons = ['–í–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ', '–í–∫–ª/–≤—ã–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ä–µ–∑—é–º–µ', '–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—é–º–µ',
               '–£–≤–∏–¥–µ—Ç—å –ø—Ä—Å–º–æ—Ç—Ä—ã —Ä–µ–∑—é–º–µ', '–í–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ']
    datas = ['on_autoupdate_resume', 'on_resume_monitor', 'update_resume', 'look_views', 'back']
    await callback.message.edit_text(text=f'{choosed_resume}',
                                     reply_markup=inline_keyboard.work_with_resume(1, buttons, datas))
    all_views = None
    views_pagination = 0

@router.callback_query(F.data == 'on_autoupdate_resume')
async def autoupdate_resume(callback: CallbackQuery):
    async with async_session() as session:
        autoupdate_status = await session.execute(select(UserResumes.autoupdate).where(UserResumes.user_id == callback.from_user.id).where(UserResumes.title == callback.message.text))
        autoupdate_status = autoupdate_status.fetchone()
        if autoupdate_status[0] == False:
            await session.execute(update(UserResumes).values(autoupdate = True).where(UserResumes.user_id == callback.from_user.id).where(UserResumes.title == callback.message.text))
            await session.commit()
            await callback.message.answer('‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ!')
        if autoupdate_status[0] == True:
            await session.execute(update(UserResumes).values(autoupdate = False).where(UserResumes.user_id == callback.from_user.id).where(UserResumes.title == callback.message.text))
            await session.commit()
            await callback.message.answer('üö´ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ –±—ã–ª–æ –≤—ã–∫–ª—é—á–µ–Ω–æ!')

@router.callback_query(F.data == 'on_resume_monitor')
async def monitor_views_notifications(callback: CallbackQuery):
    async with async_session() as session:
        monitor_status = await session.execute(select(UserResumes.monitoring_views).where(UserResumes.user_id == callback.from_user.id).where(UserResumes.title == callback.message.text))
        monitor_status = monitor_status.fetchone()
    if monitor_status[0] == False:
        async with async_session() as session:
            await session.execute(update(UserResumes).values(monitoring_views = True).where(UserResumes.user_id == callback.from_user.id).where(UserResumes.title == callback.message.text))
            await session.commit()
        await callback.message.answer('‚úÖ–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ä–µ–∑—é–º–µ –±—ã–ª –≤–∫–ª—é—á–µ–Ω!')
    if monitor_status[0] == True:
        async with async_session() as session:
            await session.execute(update(UserResumes).values(monitoring_views=False).where(UserResumes.user_id == callback.from_user.id).where(UserResumes.title == callback.message.text))
            await session.commit()
        await callback.message.answer('üö´ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ä–µ–∑—é–º–µ –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω!')

@router.callback_query(F.data == 'back')
async def back_button(callback: CallbackQuery):
    global choosed_resume, views_pagination, all_views
    await callback.message.bot.send_photo(chat_id=callback.from_user.id, photo=FSInputFile('static/hh.jpg'),
                                 caption='üåê–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:\n'
                                         'üîç –ü–æ–∏—Å–∫ –í–∞–∫–∞–Ω—Å–∏–π - –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã, —É–∫–∞–∑–∞–≤ –∂–µ–ª–∞–µ–º—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞'
                                         '\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ù–∞—Å—Ç—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –∏ —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.'
                                         '\nüìÑ –†–∞–±–æ—Ç–∞ —Å –†–µ–∑—é–º–µ - –£–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏–º–∏ —Ä–µ–∑—é–º–µ, –æ–±–Ω–æ–≤–ª—è–π –∏—Ö, –≤–∫–ª—é—á–∞–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.\n'
                                         'üö´ –ó–∞–±—ã—Ç—å –ú–µ–Ω—è - –£–¥–∞–ª–∏ –≤—Å—é —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.'
                                         '\n‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è –°–≤—è–∑—å - –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∑—ã–≤—ã —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞.'
                                         '\nü§ñ –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É.',
                                 reply_markup=inline_keyboard.create_inline_kb(2, '–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π',
                                                                               '–†–∞–±–æ—Ç–∞ —Å —Ä–µ–∑—é–º–µ',
                                                                               '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                                                                               '–ó–∞–±—ã—Ç—å –º–µ–Ω—è', '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'))
    choosed_resume =''
    views_pagination = 0
    all_views = None









