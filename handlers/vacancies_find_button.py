from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile, reply_keyboard_remove
from keyboards import inline_keyboard, keyboards
from database import requests1 as db
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from api.api import run
from api.data_processor_api import DataProcessor
from ast import literal_eval
from sqlalchemy import delete
from models.models import Users, UserResumes, UserVacancies, FilterLogs
from database.database import async_session

router = Router()
class AskVacancieText(StatesGroup):
    vacancie = State()

class Filters(StatesGroup):
    salary = State()
    city = State()
    city_keyboard = State()
    shedule = State()
    experience = State()
    test = State()
    prof_roles = State()
    show_filtered = State()
    show_more_filtered = State()

all_vacancies = None
city_pages = 0
all_cities = []
roles_pages = 0
all_prof_roles  = []
choosed_roles = []
filtered_vacancies = None
filtered_pages = 0
button_to_update = []

def if_salary_none(item: str):
    if item == 'None':
        return '–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
    else:
        item = literal_eval(item)
        if item['from'] != None and item['to'] == None:
            return '–æ—Ç ' + str(item['from']) + ' —Ä—É–±–ª–µ–π'
        elif item['from'] == None and item['to'] != None:
            return '–¥–æ ' + str(item['to']) + ' —Ä—É–±–ª–µ–π'
        elif item['from'] != None and item['to'] != None:
            return '–æ—Ç ' + str(item['from']) + ' –¥–æ ' + str(item['to']) + ' —Ä—É–±–ª–µ–π'

@router.message(CommandStart())
async def start(message: Message):
    await db.add_user(message.from_user.id, message.from_user.username)
    await message.answer('ü§ñ–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ HH.ru!üåü üîç–ß—Ç–æ —è —É–º–µ—é?\n1) –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π: –í–≤–µ–¥–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö.'
                         '\n2) –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—Ä–æ–≤–Ω—é –∑–∞—Ä–ø–ª–∞—Ç, –æ–ø—ã—Ç—É —Ä–∞–±–æ—Ç—ã, –∏ –¥—Ä—É–≥–∏–º –≤–∞–∂–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º.'
                         '\n3) –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ: –ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–≤–æ–∏–º–∏ —Ä–µ–∑—é–º–µ, –≤–∫–ª—é—á–∞—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.'
                         '\n4) –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏ —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–≤–æ–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º, –∏—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ!'
                         '\n5) –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞: –ù–∞—Å—Ç—Ä–æ–π —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.'
                         '\nüéØ–î–ª—è —á–µ–≥–æ —è –Ω—É–∂–µ–Ω?'
                         '\n–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ —Ä–µ–∑—é–º–µ –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.'
                         '\n\nüì¨–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π?'
                         '\n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –ª—é–±—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ç–µ–±–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã!'
                         '\n–ñ–¥—É —Ç–≤–æ–∏—Ö –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ —ç—Ç–æ–º –≤–∞–∂–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã! ‚ú®')
    await message.bot.send_photo(chat_id=message.from_user.id, photo=FSInputFile('static/hh.jpg'),
                                 caption='üåê–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:\n'
                                         'üîç –ü–æ–∏—Å–∫ –í–∞–∫–∞–Ω—Å–∏–π - –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã, —É–∫–∞–∑–∞–≤ –∂–µ–ª–∞–µ–º—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞'
                                         '\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ù–∞—Å—Ç—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –∏ —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.'
                                         '\nüìÑ –†–∞–±–æ—Ç–∞ —Å –†–µ–∑—é–º–µ - –£–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏–º–∏ —Ä–µ–∑—é–º–µ, –æ–±–Ω–æ–≤–ª—è–π –∏—Ö, –≤–∫–ª—é—á–∞–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.\n'
                                         'üö´ –ó–∞–±—ã—Ç—å –ú–µ–Ω—è - –£–¥–∞–ª–∏ –≤—Å—é —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.'
                                         '\n‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è –°–≤—è–∑—å - –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∑—ã–≤—ã —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞.'
                                         '\nü§ñ –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É.',
                                 reply_markup=inline_keyboard.create_inline_kb(2, '–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π', '–†–∞–±–æ—Ç–∞ —Å —Ä–µ–∑—é–º–µ', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ó–∞–±—ã—Ç—å –º–µ–Ω—è', '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'))

@router.callback_query(F.data == '–ó–∞–±—ã—Ç—å –º–µ–Ω—è')
async def forget_me(callback: CallbackQuery):
    async with async_session() as session:
        await session.execute(delete(Users).where(Users.id == callback.from_user.id))
        await session.commit()
        await session.execute(delete(UserResumes).where(UserResumes.user_id == callback.from_user.id))
        await session.commit()
        await session.execute(delete(UserVacancies).where(UserVacancies.user_id == callback.from_user.id))
        await session.commit()
        await session.execute(delete(FilterLogs).where(FilterLogs.user_id == callback.from_user.id))
        await session.commit()
    text = '‚úÖ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã' \
           '\n–ú—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤–∞—à–∞ –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π, —Ä–µ–∑—é–º–µ, —Ñ–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' \
           '\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –∏ –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –µ—Å–ª–∏ —Å–Ω–æ–≤–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã.'
    await callback.message.answer(text = text)

@router.callback_query(F.data == '–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π', StateFilter(None))
async def ask_for_vacancie(callback: CallbackQuery, state: FSMContext):
    text = 'üîé –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–∏ÃÜ' \
           '\n–î–∞–≤–∞–∏ÃÜ—Ç–µ –Ω–∞—á–Ω–µ–º –ø–æ–∏—Å–∫ –≤–∞—à–µ–∏ÃÜ –∏–¥–µ–∞–ª—å–Ω–æ–∏ÃÜ —Ä–∞–±–æ—Ç—ã! –ü–æ–∂–∞–ª—É–∏ÃÜ—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –Ω–∞–∏ÃÜ—Ç–∏ —Å–∞–º—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å. –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ ' \
           '\n–ü—Ä–∏–º–µ—Ä: –ï—Å–ª–∏ –≤—ã –∏—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É –≤ —Å—Ñ–µ—Ä–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ ¬´–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç Python¬ª. –ú—ã –Ω–∞–∏ÃÜ–¥–µ–º –¥–ª—è –≤–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É. '
    await callback.message.answer(text = text)
    await state.set_state(AskVacancieText.vacancie)


@router.message(F.text, AskVacancieText.vacancie)
async def response(message: Message, state: FSMContext):
    await state.update_data(vacancie = message.text)
    data = await state.get_data()
    await db.add_user_text_api(str(message.from_user.id), data['vacancie'])
    text = 'üîé –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏...' \
           '\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ. –Ø —Å–æ–±–∏—Ä–∞—é —Å–∞–º—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–≤–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞. –≠—Ç–æ –Ω–µ –∑–∞–π–º—ë—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏! –¢–≤–æ—è —Å–ª–µ–¥—É—é—â–∞—è —Ä–∞–±–æ—Ç–∞ —É–∂–µ –≥–¥–µ-—Ç–æ —Ä—è–¥–æ–º, –∏ –º—ã –µ—ë –Ω–∞–π–¥—ë–º!'
    msg = await message.answer(text = text)
    result = await run(data['vacancie'])
    await db.add_vacancies(message.from_user.id, result)
    text1 = '‚úÖ–°–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω!\n' \
            '–ú—ã –Ω–∞—à–ª–∏ —Ä—è–¥ –≤–∞–∫–∞–Ω—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ. –ß—Ç–æ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?' \
            '\n1Ô∏è‚É£–ü–æ–∫–∞–∑–∞—Ç—å –í–∞–∫–∞–Ω—Å–∏–∏ - –ú–æ–≥—É –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.' \
            '\n2Ô∏è‚É£–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ú–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞.' \
            '\n3Ô∏è‚É£–í–≤–µ—Å—Ç–∏ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –ú–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.'
    await message.bot.edit_message_text(text= text1,
                                        message_id=msg.message_id, chat_id=message.from_user.id,
                                        reply_markup=inline_keyboard.create_inline_kb(2, '–í—ã–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É', '–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    await state.clear()


@router.callback_query(F.data == '–í –º–µ–Ω—é')
async def to_menu(callback: CallbackQuery):
    text1 = '‚úÖ–°–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω!\n' \
            '–ú—ã –Ω–∞—à–ª–∏ —Ä—è–¥ –≤–∞–∫–∞–Ω—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ. –ß—Ç–æ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?' \
            '\n1Ô∏è‚É£–ü–æ–∫–∞–∑–∞—Ç—å –í–∞–∫–∞–Ω—Å–∏–∏ - –ú–æ–≥—É –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.' \
            '\n2Ô∏è‚É£–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ú–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞.' \
            '\n3Ô∏è‚É£–í–≤–µ—Å—Ç–∏ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –ú–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.'
    await callback.message.bot.edit_message_text(text= text1,
                                        message_id=callback.message.message_id, chat_id=callback.from_user.id,
                                        reply_markup=inline_keyboard.create_inline_kb(2, '–í—ã–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É', '–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))



@router.callback_query(F.data == '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞', StateFilter(None))
async def start_filters(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 30000-50000 –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞',
                                  reply_markup=keyboards.create_standard_kb(2, '–æ—Ç 50 000 —Ä', '–æ—Ç 70 000 —Ä', '–æ—Ç 100 000 —Ä', '–æ—Ç 200 000 —Ä', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
    await state.set_state(Filters.salary)

@router.message(F.text, Filters.salary)
async def salary_input(message: Message, state: FSMContext):
    global all_cities, city_pages
    all_cities = await db.cities(message.from_user.id)
    if message.text == '/clear':
        await state.clear()
        await message.bot.send_photo(chat_id=message.from_user.id, photo=FSInputFile('static/hh.jpg'),
                                     caption='üåê–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:\n'
                                             'üîç –ü–æ–∏—Å–∫ –í–∞–∫–∞–Ω—Å–∏–π - –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã, —É–∫–∞–∑–∞–≤ –∂–µ–ª–∞–µ–º—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞'
                                             '\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ù–∞—Å—Ç—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –∏ —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.'
                                             '\nüìÑ –†–∞–±–æ—Ç–∞ —Å –†–µ–∑—é–º–µ - –£–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏–º–∏ —Ä–µ–∑—é–º–µ, –æ–±–Ω–æ–≤–ª—è–π –∏—Ö, –≤–∫–ª—é—á–∞–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.\n'
                                             'üö´ –ó–∞–±—ã—Ç—å –ú–µ–Ω—è - –£–¥–∞–ª–∏ –≤—Å—é —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.'
                                             '\n‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è –°–≤—è–∑—å - –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∑—ã–≤—ã —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞.'
                                             '\nü§ñ –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É.',
                                     reply_markup=inline_keyboard.create_inline_kb(2, '–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π',
                                                                                   '–†–∞–±–æ—Ç–∞ —Å —Ä–µ–∑—é–º–µ',
                                                                                   '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                                                                                   '–ó–∞–±—ã—Ç—å –º–µ–Ω—è', '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'))
    else:
        if '-' in message.text:
            await db.add_params(message.from_user.id, {'salary': message.text.split('-')[0]})
            await message.answer(f'–ö—Ä–∏—Ç–µ—Ä–∏–π –∑–∞—Ä–ø–ª–∞—Ç—ã {message.text} –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=reply_keyboard_remove.ReplyKeyboardRemove())
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é',
                                 reply_markup=inline_keyboard.create_inline_kb(2, all_cities[city_pages + 0],
                                                                               all_cities[city_pages + 1],
                                                                               all_cities[city_pages + 2],
                                                                               all_cities[city_pages + 3], '–ï—â–µ->',
                                                                               '–ù–∞—á–∞–ª–æ', '–ú–µ–Ω—é', '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é'))

            await state.set_state(Filters.city)
        else:
            await db.add_params(message.from_user.id, {'salary': message.text.split(' ')[1] + message.text.split(' ')[2]})
            await message.answer(f'–ö—Ä–∏—Ç–µ—Ä–∏–π –∑–∞—Ä–ø–ª–∞—Ç—ã {message.text} –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=reply_keyboard_remove.ReplyKeyboardRemove())
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é',
                                 reply_markup=inline_keyboard.create_inline_kb(2, all_cities[city_pages + 0], all_cities[city_pages + 1], all_cities[city_pages + 2], all_cities[city_pages + 3], '–ï—â–µ->', '–ù–∞—á–∞–ª–æ', '–ú–µ–Ω—é', '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é'))
            await state.set_state(Filters.city)



@router.callback_query(F.data, Filters.city)
async def city_input(callback: CallbackQuery, state: FSMContext):
    global city_pages, all_cities
    if callback.data not in ['–ï—â–µ->', '–ù–∞—á–∞–ª–æ', '–ú–µ–Ω—é', '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é']:
        await db.add_params(callback.from_user.id, {'city': callback.data})
        await state.update_data(city = callback.data)
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã',
                                      reply_markup=inline_keyboard.create_inline_kb(2, '–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å', '–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫', '–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫', '–í–∞—Ö—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
        await state.set_state(Filters.shedule)
    if callback.data == '–ï—â–µ->':
        city_pages += 5
        try:
            await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É',
                                          reply_markup=inline_keyboard.create_inline_kb(2, all_cities[city_pages + 0], all_cities[city_pages + 1], all_cities[city_pages + 2], all_cities[city_pages + 3], '–ï—â–µ->', '–ù–∞—á–∞–ª–æ', '–ú–µ–Ω—é', '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é'))
        except IndexError:
            try:
                if all_cities[city_pages + 0]:
                    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É',
                                          reply_markup=inline_keyboard.create_inline_kb(2, all_cities[city_pages + 0], '–ï—â–µ->', '–ù–∞—á–∞–ª–æ', '–ú–µ–Ω—é', '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é'))
                if all_cities[city_pages + 0] and all_cities[city_pages + 1]:
                    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É',
                                          reply_markup=inline_keyboard.create_inline_kb(2, all_cities[city_pages + 0], all_cities[city_pages + 1], '–ï—â–µ->', '–ù–∞—á–∞–ª–æ', '–ú–µ–Ω—é', '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é'))
                if all_cities[city_pages + 0] and all_cities[city_pages + 1] and all_cities[city_pages + 2]:
                    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É',
                                          reply_markup=inline_keyboard.create_inline_kb(2, all_cities[city_pages + 0], all_cities[city_pages + 1], all_cities[city_pages + 2], '–ï—â–µ->', '–ù–∞—á–∞–ª–æ', '–ú–µ–Ω—é', '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é'))
            except IndexError:
                pass
        await state.set_state(Filters.city)
    if callback.data == '–ù–∞—á–∞–ª–æ':
        city_pages = 0
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É',
                             reply_markup=inline_keyboard.create_inline_kb(2, all_cities[city_pages + 0], all_cities[city_pages + 1], all_cities[city_pages + 2], all_cities[city_pages + 3], '–ï—â–µ->', '–ù–∞—á–∞–ª–æ', '–ú–µ–Ω—é', '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é'))
        await state.set_state(Filters.city)
    if callback.data == '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é':
        await state.set_state(Filters.city_keyboard)
    if callback.data == '–ú–µ–Ω—é':
        await callback.message.edit_text(
            text=f'<b>–°–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {str(len(result))} –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –í–∞—Å</b>\n\n–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –≤–∞–∫–∞–Ω—Å–∏—è–º?',
            reply_markup=inline_keyboard.create_inline_kb(2, '–í—ã–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É', '–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏',
                                                          '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        await state.clear()


@router.message(F.text, Filters.city_keyboard)
async def city_keyboard_input(message: Message, state: FSMContext):
    await db.add_params(message.from_user.id, {'city': message.text})
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã',
                                  reply_markup=inline_keyboard.create_inline_kb(2, '–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å', '–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
                                                                                '–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫', '–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫',
                                                                                '–í–∞—Ö—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
    await state.set_state(Filters.shedule)


@router.callback_query(F.data, Filters.shedule)
async def schedule_input(callback: CallbackQuery, state: FSMContext):
    if callback.data == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await db.add_params(callback.from_user.id, {'shedule': callback.data})
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
                                      reply_markup=inline_keyboard.create_inline_kb(2, '–û—Ç 1 –≥–æ–¥–∞ –¥–æ 3 –ª–µ—Ç', '–û—Ç 3 –¥–æ 6 –ª–µ—Ç', '–ë–æ–ª–µ–µ 6 –ª–µ—Ç', '–ù–µ—Ç –æ–ø—ã—Ç–∞'))
        await state.set_state(Filters.experience)
    else:
        await db.add_params(callback.from_user.id, {'shedule': callback.data})
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
                                      reply_markup=inline_keyboard.create_inline_kb(2, '–û—Ç 1 –≥–æ–¥–∞ –¥–æ 3 –ª–µ—Ç', '–û—Ç 3 –¥–æ 6 –ª–µ—Ç', '–ë–æ–ª–µ–µ 6 –ª–µ—Ç', '–ù–µ—Ç –æ–ø—ã—Ç–∞'))
        await state.set_state(Filters.experience)

@router.callback_query(F.data, Filters.experience)
async def exp_input(callback: CallbackQuery, state: FSMContext):
    await db.add_params(callback.from_user.id, {'experience': callback.data})
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è', reply_markup=inline_keyboard.create_inline_kb(2, '–î–∞', '–ù–µ—Ç'))
    await state.set_state(Filters.test)

@router.callback_query(F.data, Filters.test)
async def test_input(callback: CallbackQuery, state: FSMContext):
    global filtered_vacancies, roles_pages, all_prof_roles, all_vacancies
    result = await db.all_vacancies(callback.from_user.id)
    if callback.data == '–î–∞':
        await db.add_params(callback.from_user.id, {'test': 'False'})
        filtered_vacancies = await DataProcessor(result, callback.from_user.id).filtered_by_salary()
        filtered_vacancies = await DataProcessor(filtered_vacancies, callback.from_user.id).filtered_by_area()
        filtered_vacancies = await DataProcessor(filtered_vacancies, callback.from_user.id).filtered_by_schedule()
        filtered_vacancies = await DataProcessor(filtered_vacancies, callback.from_user.id).filtered_by_experience()
        filtered_vacancies = await DataProcessor(filtered_vacancies, callback.from_user.id).filetered_by_test()
        all_prof_roles = await DataProcessor(filtered_vacancies, callback.from_user.id).all_prof_roles()
        try:
            await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—ã–µ —Ä–æ–ª–∏',
                                      reply_markup=inline_keyboard.create_inline_kb(1, all_prof_roles[roles_pages + 0], all_prof_roles[roles_pages + 1], all_prof_roles[roles_pages + 2], all_prof_roles[roles_pages + 3], '–î–∞–ª–µ–µ', '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
        except IndexError:
            try:
                if all_prof_roles[roles_pages + 0] and all_prof_roles[roles_pages + 1] and all_prof_roles[
                    roles_pages + 2]:
                    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—ã–µ —Ä–æ–ª–∏',
                                                  reply_markup=inline_keyboard.create_inline_kb(1, all_prof_roles[
                                                      roles_pages + 0], all_prof_roles[roles_pages + 1], all_prof_roles[
                                                                                                    roles_pages + 2],
                                                                                                '–î–∞–ª–µ–µ',
                                                                                                '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥',
                                                                                                '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
            except Exception:
                try:
                    if all_prof_roles[roles_pages + 0] and all_prof_roles[roles_pages + 1]:
                        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—ã–µ —Ä–æ–ª–∏',
                                                      reply_markup=inline_keyboard.create_inline_kb(1, all_prof_roles[
                                                          roles_pages + 0], all_prof_roles[roles_pages + 1], '–î–∞–ª–µ–µ',
                                                                                                    '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥',
                                                                                                    '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
                except Exception:
                    try:
                        if all_prof_roles[roles_pages + 0]:
                            await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—ã–µ —Ä–æ–ª–∏',
                                                          reply_markup=inline_keyboard.create_inline_kb(1,
                                                                                                        all_prof_roles[
                                                                                                            roles_pages + 0],
                                                                                                        '–î–∞–ª–µ–µ',
                                                                                                        '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥',
                                                                                                        '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
                    except Exception:
                        try:
                            if all_prof_roles == []:
                                await callback.message.answer('–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã',
                                                              reply_markup=inline_keyboard.create_inline_kb(1,
                                                                                                            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
                        except Exception:
                            pass
        await state.set_state(Filters.prof_roles)
    if callback.data == '–ù–µ—Ç':
        await db.add_params(callback.from_user.id, {'test': 'True'})
        filtered_vacancies = await DataProcessor(result, callback.from_user.id).filtered_by_salary()
        filtered_vacancies = await DataProcessor(filtered_vacancies, callback.from_user.id).filtered_by_area()
        filtered_vacancies = await DataProcessor(filtered_vacancies, callback.from_user.id).filtered_by_schedule()
        filtered_vacancies = await DataProcessor(filtered_vacancies, callback.from_user.id).filtered_by_experience()
        filtered_vacancies = await DataProcessor(filtered_vacancies, callback.from_user.id).filetered_by_test()
        all_prof_roles = await DataProcessor(filtered_vacancies, callback.from_user.id).all_prof_roles()
        try:
            await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—ã–µ —Ä–æ–ª–∏',
                                      reply_markup=inline_keyboard.create_inline_kb(1, all_prof_roles[roles_pages + 0], all_prof_roles[roles_pages + 1], all_prof_roles[roles_pages + 2], all_prof_roles[roles_pages + 3], '–î–∞–ª–µ–µ', '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
        except IndexError:
            try:
                if all_prof_roles[roles_pages + 0] and all_prof_roles[roles_pages + 1] and all_prof_roles[
                    roles_pages + 2]:
                    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—ã–µ —Ä–æ–ª–∏',
                                                  reply_markup=inline_keyboard.create_inline_kb(1, all_prof_roles[
                                                      roles_pages + 0], all_prof_roles[roles_pages + 1], all_prof_roles[
                                                                                                    roles_pages + 2],
                                                                                                '–î–∞–ª–µ–µ',
                                                                                                '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥',
                                                                                                '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
            except Exception:
                try:
                    if all_prof_roles[roles_pages + 0] and all_prof_roles[roles_pages + 1]:
                        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—ã–µ —Ä–æ–ª–∏',
                                                      reply_markup=inline_keyboard.create_inline_kb(1, all_prof_roles[
                                                          roles_pages + 0], all_prof_roles[roles_pages + 1], '–î–∞–ª–µ–µ',
                                                                                                    '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥',
                                                                                                    '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
                except Exception:
                    try:
                        if all_prof_roles[roles_pages + 0]:
                            await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—ã–µ —Ä–æ–ª–∏',
                                                          reply_markup=inline_keyboard.create_inline_kb(1,
                                                                                                        all_prof_roles[
                                                                                                            roles_pages + 0],
                                                                                                        '–î–∞–ª–µ–µ',
                                                                                                        '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥',
                                                                                                        '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
                    except Exception:
                        try:
                            if all_prof_roles == []:
                                await callback.message.answer('–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã',
                                                              reply_markup=inline_keyboard.create_inline_kb(1,
                                                                                                            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
                        except Exception:
                            pass
        await state.set_state(Filters.prof_roles)

@router.callback_query(F.data, Filters.prof_roles)
async def role_input(callback: CallbackQuery, state: FSMContext):
    global roles_pages, all_prof_roles, filtered_vacancies, choosed_roles, button_to_update
    if callback.data not in ['–î–∞–ª–µ–µ', '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–ù–∞—á–∞–ª–æ'] and '‚úÖ' not in callback.data:
        if ',' in callback.data:
            choosed_roles.append(callback.data.replace(',', ' '))
        else:
            choosed_roles.append(callback.data)
        button_to_update.append(callback.data)
        choosed_roles = list(set(choosed_roles))
    if callback.data not in ['–î–∞–ª–µ–µ', '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–ù–∞—á–∞–ª–æ']:

        try:
            await callback.message.edit_reply_markup(callback.inline_message_id,
                                                     reply_markup=inline_keyboard.create_inline_kb(1, all_prof_roles[roles_pages + 0] + '‚úÖ' if all_prof_roles[roles_pages + 0] in button_to_update else  all_prof_roles[roles_pages + 0],
                                                                                                   all_prof_roles[roles_pages + 1] + '‚úÖ' if all_prof_roles[roles_pages + 1] in button_to_update else all_prof_roles[roles_pages + 1],
                                                                                                   all_prof_roles[roles_pages + 2] + '‚úÖ' if all_prof_roles[roles_pages + 2] in button_to_update else all_prof_roles[roles_pages + 2],
                                                                                                   all_prof_roles[roles_pages + 3] + '‚úÖ' if all_prof_roles[roles_pages + 3] in button_to_update else all_prof_roles[roles_pages + 3],
                                                                                                   '–î–∞–ª–µ–µ',
                                                                                                   '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥',
                                                                                                   '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
        except IndexError:
            try:
                if all_prof_roles[roles_pages + 0] and all_prof_roles[roles_pages + 1] and all_prof_roles[
                    roles_pages + 2]:
                    await callback.message.edit_reply_markup(callback.inline_message_id,
                                                             reply_markup=inline_keyboard.create_inline_kb(1,
                                                                                                           all_prof_roles[roles_pages + 0] + '‚úÖ' if all_prof_roles[roles_pages + 0] in button_to_update else all_prof_roles[roles_pages + 0],
                                                                                                           all_prof_roles[roles_pages + 1] + '‚úÖ' if all_prof_roles[roles_pages + 1] in button_to_update else all_prof_roles[roles_pages + 1],
                                                                                                           all_prof_roles[roles_pages + 2] + '‚úÖ' if all_prof_roles[roles_pages + 2] in button_to_update else all_prof_roles[roles_pages + 2],
                                                                                                           '–î–∞–ª–µ–µ',
                                                                                                           '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥',
                                                                                                           '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
            except Exception:
                try:
                    if all_prof_roles[roles_pages + 0] and all_prof_roles[roles_pages + 1]:
                        await callback.message.edit_reply_markup(callback.inline_message_id,
                                                                 reply_markup=inline_keyboard.create_inline_kb(1,
                                                                                                               all_prof_roles[roles_pages + 0] + '‚úÖ' if all_prof_roles[roles_pages + 0] in button_to_update else all_prof_roles[roles_pages + 0],
                                                                                                               all_prof_roles[roles_pages + 1] + '‚úÖ' if all_prof_roles[roles_pages + 1] in button_to_update else all_prof_roles[roles_pages + 1],
                                                                                                               '–î–∞–ª–µ–µ',
                                                                                                               '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥',
                                                                                                               '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
                except Exception:
                    try:
                        if all_prof_roles[roles_pages + 0]:
                            await callback.message.edit_reply_markup(callback.inline_message_id,
                                                                     reply_markup=inline_keyboard.create_inline_kb(1,
                                                                                                                   all_prof_roles[roles_pages + 0] + '‚úÖ' if all_prof_roles[roles_pages + 0] in button_to_update else all_prof_roles[roles_pages + 0],
                                                                                                                   '–î–∞–ª–µ–µ',
                                                                                                                   '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥',
                                                                                                                   '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
                    except Exception:
                        try:
                            if all_prof_roles == []:
                                await callback.message.answer('–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã',
                                                              reply_markup=inline_keyboard.create_inline_kb(1,
                                                                                                            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
                        except Exception:
                            pass
    if callback.data == '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥':
        await db.add_params(callback.from_user.id, {'prof_roles': ','.join(choosed_roles)})
        await callback.message.answer('–í—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã, –∂–µ–ª–∞–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏?', reply_markup=inline_keyboard.create_inline_kb(1, '–ü–æ–∫–∞–∑–∞—Ç—å'))
        await state.set_state(Filters.show_filtered)
    if callback.data == '–î–∞–ª–µ–µ':
        roles_pages += 4
        try:
            await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—ã–µ —Ä–æ–ª–∏',
                                      reply_markup=inline_keyboard.create_inline_kb(1, all_prof_roles[roles_pages + 0], all_prof_roles[roles_pages + 1], all_prof_roles[roles_pages + 2], all_prof_roles[roles_pages + 3], '–î–∞–ª–µ–µ', '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
        except IndexError:
            try:
                if all_prof_roles[roles_pages + 0] and all_prof_roles[roles_pages + 1] and all_prof_roles[
                    roles_pages + 2]:
                    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—ã–µ —Ä–æ–ª–∏',
                                                  reply_markup=inline_keyboard.create_inline_kb(1, all_prof_roles[
                                                      roles_pages + 0], all_prof_roles[roles_pages + 1], all_prof_roles[
                                                                                                    roles_pages + 2],
                                                                                                '–î–∞–ª–µ–µ',
                                                                                                '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥',
                                                                                                '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
            except Exception:
                try:
                    if all_prof_roles[roles_pages + 0] and all_prof_roles[roles_pages + 1]:
                        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—ã–µ —Ä–æ–ª–∏',
                                                      reply_markup=inline_keyboard.create_inline_kb(1, all_prof_roles[
                                                          roles_pages + 0], all_prof_roles[roles_pages + 1], '–î–∞–ª–µ–µ',
                                                                                                    '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥',
                                                                                                    '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
                except Exception:
                    try:
                        if all_prof_roles[roles_pages + 0]:
                            await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—ã–µ —Ä–æ–ª–∏',
                                                          reply_markup=inline_keyboard.create_inline_kb(1,
                                                                                                        all_prof_roles[
                                                                                                            roles_pages + 0],
                                                                                                        '–î–∞–ª–µ–µ',
                                                                                                        '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥',
                                                                                                        '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
                    except Exception:
                        pass
        await state.set_state(Filters.prof_roles)
    if callback.data == '–ù–∞—á–∞–ª–æ':
        roles_pages = 0
        try:
            await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—ã–µ —Ä–æ–ª–∏',
                                      reply_markup=inline_keyboard.create_inline_kb(1, all_prof_roles[roles_pages + 0], all_prof_roles[roles_pages + 1], all_prof_roles[roles_pages + 2], all_prof_roles[roles_pages + 3], '–î–∞–ª–µ–µ', '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
        except IndexError:
            try:
                if all_prof_roles[roles_pages + 0] and all_prof_roles[roles_pages + 1] and all_prof_roles[
                    roles_pages + 2]:
                    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—ã–µ —Ä–æ–ª–∏',
                                                  reply_markup=inline_keyboard.create_inline_kb(1, all_prof_roles[
                                                      roles_pages + 0], all_prof_roles[roles_pages + 1], all_prof_roles[
                                                                                                    roles_pages + 2],
                                                                                                '–î–∞–ª–µ–µ',
                                                                                                '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥',
                                                                                                '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
            except Exception:
                try:
                    if all_prof_roles[roles_pages + 0] and all_prof_roles[roles_pages + 1]:
                        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—ã–µ —Ä–æ–ª–∏',
                                                      reply_markup=inline_keyboard.create_inline_kb(1, all_prof_roles[
                                                          roles_pages + 0], all_prof_roles[roles_pages + 1], '–î–∞–ª–µ–µ',
                                                                                                    '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥',
                                                                                                    '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
                except Exception:
                    try:
                        if all_prof_roles[roles_pages + 0]:
                            await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—ã–µ —Ä–æ–ª–∏',
                                                          reply_markup=inline_keyboard.create_inline_kb(1,
                                                                                                        all_prof_roles[
                                                                                                            roles_pages + 0],
                                                                                                        '–î–∞–ª–µ–µ',
                                                                                                        '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥',
                                                                                                        '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
                    except Exception:
                        pass
        await state.set_state(Filters.prof_roles)
    if callback.data == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await db.add_params(callback.from_user.id, {'prof_roles': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'})
        await callback.message.answer('–í—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã, –∂–µ–ª–∞–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏?', reply_markup=inline_keyboard.create_inline_kb(1, '–ü–æ–∫–∞–∑–∞—Ç—å'))
        await state.set_state(Filters.show_filtered)

@router.callback_query(F.data, Filters.show_filtered)
async def show_filtered(callback: CallbackQuery, state: FSMContext):
    global filtered_pages, filtered_vacancies, choosed_roles, button_to_update
    filtered_vacancies = await DataProcessor(filtered_vacancies, callback.from_user.id).filetered_by_role()
    try:
        await callback.message.answer(text = f'<b>{filtered_vacancies[filtered_pages+0][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages+0][1])}\n{filtered_vacancies[filtered_pages+0][7]}'
                                            f'\n\n<b>{filtered_vacancies[filtered_pages+1][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages+1][1])}\n{filtered_vacancies[filtered_pages+1][7]}'
                                            f'\n\n<b>{filtered_vacancies[filtered_pages+2][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages+2][1])}\n{filtered_vacancies[filtered_pages+2][7]}\n\n'
                                            f'<b>{filtered_vacancies[filtered_pages+3][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages+3][1])}\n{filtered_vacancies[filtered_pages+3][7]}\n\n'
                                            f'<b>{filtered_vacancies[filtered_pages+4][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages+4][1])}\n{filtered_vacancies[filtered_pages+4][7]}',
                                     reply_markup=inline_keyboard.create_inline_kb(2, '–î–∞–ª—å—à–µ', '–ù–∞—á–∞–ª–æ', '–ó–∞–∫—Ä—ã—Ç—å'))
    except IndexError:
        try:
            if len(filtered_vacancies) == 0:
                await callback.message.edit_text('–ù–∞–π–¥–µ–Ω–æ 0 –≤–∞–∫–∞–Ω—Å–∏–π', reply_markup=inline_keyboard.create_inline_kb(1, '–ó–∞–∫—Ä—ã—Ç—å'))
                filtered_vacancies = []
            if filtered_vacancies[filtered_pages + 0] and (not filtered_vacancies[filtered_pages + 1]) and (not filtered_vacancies[filtered_pages + 2]) and (not filtered_vacancies[filtered_pages + 3]):
                await callback.message.edit_text(
                    text=f'<b>{filtered_vacancies[filtered_pages + 0][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 0][1])}\n{filtered_vacancies[filtered_pages + 0][7]}',
                        reply_markup=inline_keyboard.create_inline_kb(2, '–î–∞–ª—å—à–µ', '–ù–∞—á–∞–ª–æ', '–ó–∞–∫—Ä—ã—Ç—å'))
            if filtered_vacancies[filtered_pages + 0] and filtered_vacancies[filtered_pages + 1]:
                await callback.message.edit_text(
                    text=f'<b>{filtered_vacancies[filtered_pages + 0][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 0][1])}\n{filtered_vacancies[filtered_pages + 0][7]}'
                         f'\n\n<b>{filtered_vacancies[filtered_pages + 1][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 1][1])}\n{filtered_vacancies[filtered_pages + 1][7]}',
                    reply_markup=inline_keyboard.create_inline_kb(2, '–î–∞–ª—å—à–µ', '–ù–∞—á–∞–ª–æ', '–ó–∞–∫—Ä—ã—Ç—å'))
            if filtered_vacancies[filtered_pages + 0] and filtered_vacancies[filtered_pages + 1] and filtered_vacancies[filtered_pages + 2]:
                await callback.message.edit_text(
                    text=f'<b>{filtered_vacancies[filtered_pages + 0][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 0][1])}\n{filtered_vacancies[filtered_pages + 0][7]}'
                         f'\n\n<b>{filtered_vacancies[filtered_pages + 1][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 1][1])}\n{filtered_vacancies[filtered_pages + 1][7]}'
                         f'\n\n<b>{filtered_vacancies[filtered_pages + 2][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 2][1])}\n{filtered_vacancies[filtered_pages + 2][7]}\n\n',
                    reply_markup=inline_keyboard.create_inline_kb(2, '–î–∞–ª—å—à–µ', '–ù–∞—á–∞–ª–æ', '–ó–∞–∫—Ä—ã—Ç—å'))
            if filtered_vacancies[filtered_pages + 0] and filtered_vacancies[filtered_pages + 1] and filtered_vacancies[filtered_pages + 2] and filtered_vacancies[filtered_pages + 3]:
                await callback.message.edit_text(
                    text=f'<b>{filtered_vacancies[filtered_pages + 0][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 0][1])}\n{filtered_vacancies[filtered_pages + 0][7]}'
                         f'\n\n<b>{filtered_vacancies[filtered_pages + 1][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 1][1])}\n{filtered_vacancies[filtered_pages + 1][7]}'
                         f'\n\n<b>{filtered_vacancies[filtered_pages + 2][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 2][1])}\n{filtered_vacancies[filtered_pages + 2][7]}\n\n'
                         f'<b>{filtered_vacancies[filtered_pages + 3][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 3][1])}\n{filtered_vacancies[filtered_pages + 3][7]}\n\n',
                    reply_markup=inline_keyboard.create_inline_kb(2, '–î–∞–ª—å—à–µ', '–ù–∞—á–∞–ª–æ', '–ó–∞–∫—Ä—ã—Ç—å'))
        except IndexError:
            pass
    await state.set_state(Filters.show_more_filtered)

@router.callback_query(F.data.in_(['–î–∞–ª—å—à–µ', '–ù–∞—á–∞–ª–æ', '–ó–∞–∫—Ä—ã—Ç—å']), Filters.show_more_filtered)
async def look_filtered(callback: CallbackQuery, state: FSMContext):
    global filtered_vacancies, filtered_pages, result, choosed_roles, roles_pages
    if callback.data == '–î–∞–ª—å—à–µ':
        filtered_pages += 5
        try:
            await callback.message.edit_text(
                text=f'<b>{filtered_vacancies[filtered_pages + 0][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 0][1])}\n{filtered_vacancies[filtered_pages + 0][7]}'
                     f'\n\n<b>{filtered_vacancies[filtered_pages + 1][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 1][1])}\n{filtered_vacancies[filtered_pages + 1][7]}'
                     f'\n\n<b>{filtered_vacancies[filtered_pages + 2][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 2][1])}\n{filtered_vacancies[filtered_pages + 2][7]}\n\n'
                     f'<b>{filtered_vacancies[filtered_pages + 3][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 3][1])}\n{filtered_vacancies[filtered_pages + 3][7]}\n\n'
                     f'<b>{filtered_vacancies[filtered_pages + 4][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 4][1])}\n{filtered_vacancies[filtered_pages + 4][7]}',
                reply_markup=inline_keyboard.create_inline_kb(2, '–î–∞–ª—å—à–µ', '–ù–∞—á–∞–ª–æ', '–ó–∞–∫—Ä—ã—Ç—å'))
        except IndexError:
            try:
                if filtered_vacancies[filtered_pages + 0] and filtered_vacancies[filtered_pages + 1] and \
                        filtered_vacancies[filtered_pages + 2] and filtered_vacancies[filtered_pages + 3]:
                    await callback.message.edit_text(
                        text=f'<b>{filtered_vacancies[filtered_pages + 0][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 0][1])}\n{filtered_vacancies[filtered_pages + 0][7]}'
                             f'\n\n<b>{filtered_vacancies[filtered_pages + 1][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 1][1])}\n{filtered_vacancies[filtered_pages + 1][7]}'
                             f'\n\n<b>{filtered_vacancies[filtered_pages + 2][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 2][1])}\n{filtered_vacancies[filtered_pages + 2][7]}\n\n'
                             f'<b>{filtered_vacancies[filtered_pages + 3][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 3][1])}\n{filtered_vacancies[filtered_pages + 3][7]}\n\n',
                        reply_markup=inline_keyboard.create_inline_kb(2, '–î–∞–ª—å—à–µ', '–ù–∞—á–∞–ª–æ', '–ó–∞–∫—Ä—ã—Ç—å'))
            except IndexError:
                try:
                    if filtered_vacancies[filtered_pages + 0] and filtered_vacancies[filtered_pages + 1] and \
                            filtered_vacancies[filtered_pages + 2]:
                        await callback.message.edit_text(
                            text=f'<b>{filtered_vacancies[filtered_pages + 0][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 0][1])}\n{filtered_vacancies[filtered_pages + 0][7]}'
                                 f'\n\n<b>{filtered_vacancies[filtered_pages + 1][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 1][1])}\n{filtered_vacancies[filtered_pages + 1][7]}'
                                 f'\n\n<b>{filtered_vacancies[filtered_pages + 2][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 2][1])}\n{filtered_vacancies[filtered_pages + 2][7]}\n\n',
                            reply_markup=inline_keyboard.create_inline_kb(2, '–î–∞–ª—å—à–µ', '–ù–∞—á–∞–ª–æ', '–ó–∞–∫—Ä—ã—Ç—å'))
                except IndexError:
                    try:
                        if filtered_vacancies[filtered_pages + 0] and filtered_vacancies[filtered_pages + 1]:
                            await callback.message.edit_text(
                                text=f'<b>{filtered_vacancies[filtered_pages + 0][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 0][1])}\n{filtered_vacancies[filtered_pages + 0][7]}'
                                     f'\n\n<b>{filtered_vacancies[filtered_pages + 1][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 1][1])}\n{filtered_vacancies[filtered_pages + 1][7]}',
                                reply_markup=inline_keyboard.create_inline_kb(2, '–î–∞–ª—å—à–µ', '–ù–∞—á–∞–ª–æ', '–ó–∞–∫—Ä—ã—Ç—å'))
                    except IndexError:
                        if filtered_vacancies[filtered_pages + 0]:
                            await callback.message.edit_text(
                                text=f'<b>{filtered_vacancies[filtered_pages + 0][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 0][1])}\n{filtered_vacancies[filtered_pages + 0][7]}',
                                reply_markup=inline_keyboard.create_inline_kb(2, '–î–∞–ª—å—à–µ', '–ù–∞—á–∞–ª–æ', '–ó–∞–∫—Ä—ã—Ç—å'))
        await state.set_state(Filters.show_more_filtered)
    if callback.data == '–ù–∞—á–∞–ª–æ':
        filtered_pages = 0
        try:
            await callback.message.edit_text(
                text=f'<b>{filtered_vacancies[filtered_pages + 0][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 0][1])}\n{filtered_vacancies[filtered_pages + 0][7]}'
                     f'\n\n<b>{filtered_vacancies[filtered_pages + 1][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 1][1])}\n{filtered_vacancies[filtered_pages + 1][7]}'
                     f'\n\n<b>{filtered_vacancies[filtered_pages + 2][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 2][1])}\n{filtered_vacancies[filtered_pages + 2][7]}\n\n'
                     f'<b>{filtered_vacancies[filtered_pages + 3][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 3][1])}\n{filtered_vacancies[filtered_pages + 3][7]}\n\n'
                     f'<b>{filtered_vacancies[filtered_pages + 4][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 4][1])}\n{filtered_vacancies[filtered_pages + 4][7]}',
                reply_markup=inline_keyboard.create_inline_kb(2, '–î–∞–ª—å—à–µ', '–ù–∞—á–∞–ª–æ', '–ó–∞–∫—Ä—ã—Ç—å'))
        except IndexError:
            try:
                if filtered_vacancies[filtered_pages + 0] and filtered_vacancies[filtered_pages + 1] and \
                        filtered_vacancies[filtered_pages + 2] and filtered_vacancies[filtered_pages + 3]:
                    await callback.message.edit_text(
                        text=f'<b>{filtered_vacancies[filtered_pages + 0][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 0][1])}\n{filtered_vacancies[filtered_pages + 0][7]}'
                             f'\n\n<b>{filtered_vacancies[filtered_pages + 1][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 1][1])}\n{filtered_vacancies[filtered_pages + 1][7]}'
                             f'\n\n<b>{filtered_vacancies[filtered_pages + 2][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 2][1])}\n{filtered_vacancies[filtered_pages + 2][7]}\n\n'
                             f'<b>{filtered_vacancies[filtered_pages + 3][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 3][1])}\n{filtered_vacancies[filtered_pages + 3][7]}\n\n',
                        reply_markup=inline_keyboard.create_inline_kb(2, '–î–∞–ª—å—à–µ', '–ù–∞—á–∞–ª–æ', '–ó–∞–∫—Ä—ã—Ç—å'))
            except IndexError:
                try:
                    if filtered_vacancies[filtered_pages + 0] and filtered_vacancies[filtered_pages + 1] and \
                            filtered_vacancies[filtered_pages + 2]:
                        await callback.message.edit_text(
                            text=f'<b>{filtered_vacancies[filtered_pages + 0][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 0][1])}\n{filtered_vacancies[filtered_pages + 0][7]}'
                                 f'\n\n<b>{filtered_vacancies[filtered_pages + 1][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 1][1])}\n{filtered_vacancies[filtered_pages + 1][7]}'
                                 f'\n\n<b>{filtered_vacancies[filtered_pages + 2][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 2][1])}\n{filtered_vacancies[filtered_pages + 2][7]}\n\n',
                            reply_markup=inline_keyboard.create_inline_kb(2, '–î–∞–ª—å—à–µ', '–ù–∞—á–∞–ª–æ', '–ó–∞–∫—Ä—ã—Ç—å'))
                except IndexError:
                    try:
                        if filtered_vacancies[filtered_pages + 0] and filtered_vacancies[filtered_pages + 1]:
                            await callback.message.edit_text(
                                text=f'<b>{filtered_vacancies[filtered_pages + 0][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 0][1])}\n{filtered_vacancies[filtered_pages + 0][7]}'
                                     f'\n\n<b>{filtered_vacancies[filtered_pages + 1][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 1][1])}\n{filtered_vacancies[filtered_pages + 1][7]}',
                                reply_markup=inline_keyboard.create_inline_kb(2, '–î–∞–ª—å—à–µ', '–ù–∞—á–∞–ª–æ', '–ó–∞–∫—Ä—ã—Ç—å'))
                    except IndexError:
                        if filtered_vacancies[filtered_pages + 0]:
                            await callback.message.edit_text(
                                text=f'<b>{filtered_vacancies[filtered_pages + 0][0]}</b>\n{if_salary_none(filtered_vacancies[filtered_pages + 0][1])}\n{filtered_vacancies[filtered_pages + 0][7]}',
                                reply_markup=inline_keyboard.create_inline_kb(2, '–î–∞–ª—å—à–µ', '–ù–∞—á–∞–ª–æ', '–ó–∞–∫—Ä—ã—Ç—å'))
        await state.set_state(Filters.show_more_filtered)
    if callback.data == '–ó–∞–∫—Ä—ã—Ç—å':
        result = await db.all_vacancies(callback.from_user.id)
        text1 = '‚úÖ–°–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω!\n' \
                '–ú—ã –Ω–∞—à–ª–∏ —Ä—è–¥ –≤–∞–∫–∞–Ω—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ. –ß—Ç–æ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?' \
                '\n1Ô∏è‚É£–ü–æ–∫–∞–∑–∞—Ç—å –í–∞–∫–∞–Ω—Å–∏–∏ - –ú–æ–≥—É –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.' \
                '\n2Ô∏è‚É£–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ú–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞.' \
                '\n3Ô∏è‚É£–í–≤–µ—Å—Ç–∏ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –ú–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.'
        await callback.message.edit_text(text=text1, reply_markup=inline_keyboard.create_inline_kb(2, '–í—ã–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É',
                                                                                          '–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏',
                                                                                          '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞',
                                                                                          '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫',
                                                                                          '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        await state.clear()
        filtered_vacancies = []
        filtered_pages = 0
        choosed_roles = []
        button_to_update = []
        city_pages = 0
        roles_pages = 0


@router.callback_query(F.data == '–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏')
async def displat_vacancies(callback: CallbackQuery):
    global result
    vacancies = await db.all_vacancie_pagination(callback.from_user.id, page)
    text = []
    for vacancie in vacancies:
        print(vacancie)
        text.append(f'{vacancie[0]}\n{if_salary_none(vacancie[1])}\n{vacancie[7]}')
    text_msg = '\n\n'.join(text)
    await callback.message.edit_text(text = text_msg,
                                     reply_markup=inline_keyboard.create_inline_kb(2, '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', '–í –Ω–∞—á–∞–ª–æ', '–í –º–µ–Ω—é'))

page = 0
@router.callback_query(F.data == '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
async def displat_vacancies(callback: CallbackQuery):
    global page
    page += 5
    vacancies = await db.all_vacancie_pagination(callback.from_user.id, page)
    text = []
    for vacancie in vacancies:
        text.append(f'{vacancie[0]}\n{if_salary_none(vacancie[1])}\n{vacancie[7]}')
    text_msg = '\n\n'.join(text)
    await callback.message.edit_text(
        text=text_msg,
        reply_markup=inline_keyboard.create_inline_kb(2, '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', '–í –Ω–∞—á–∞–ª–æ', '–í –º–µ–Ω—é'))


@router.callback_query(F.data == '–í –Ω–∞—á–∞–ª–æ')
async def first_page_vacancies(callback: CallbackQuery):
    page = 0
    vacancies = await db.all_vacancie_pagination(callback.from_user.id, page)
    text = []
    for vacancie in vacancies:
        text.append(f'{vacancie[0]}\n{if_salary_none(vacancie[1])}\n{vacancie[7]}')
    text_msg = '\n\n'.join(text)
    await callback.message.edit_text(
        text= text_msg,
        reply_markup=inline_keyboard.create_inline_kb(2, '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', '–í –Ω–∞—á–∞–ª–æ', '–í –º–µ–Ω—é'))


@router.callback_query(F.data == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def menu_button(callback: CallbackQuery):
    global result
    await db.delete_vacancies_by_id(callback.from_user.id)
    await callback.message.delete()
    await callback.message.bot.send_photo(chat_id=callback.from_user.id, photo=FSInputFile('static/hh.jpg'),
                                 caption='üåê–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:\n'
                                         'üîç –ü–æ–∏—Å–∫ –í–∞–∫–∞–Ω—Å–∏–π - –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã, —É–∫–∞–∑–∞–≤ –∂–µ–ª–∞–µ–º—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞'
                                         '\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ù–∞—Å—Ç—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –∏ —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.'
                                         '\nüìÑ –†–∞–±–æ—Ç–∞ —Å –†–µ–∑—é–º–µ - –£–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏–º–∏ —Ä–µ–∑—é–º–µ, –æ–±–Ω–æ–≤–ª—è–π –∏—Ö, –≤–∫–ª—é—á–∞–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.\n'
                                         'üö´ –ó–∞–±—ã—Ç—å –ú–µ–Ω—è - –£–¥–∞–ª–∏ –≤—Å—é —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.'
                                         '\n‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è –°–≤—è–∑—å - –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∑—ã–≤—ã —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞.'
                                         '\nü§ñ –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É.',
                                 reply_markup=inline_keyboard.create_inline_kb(2, '–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π', '–†–∞–±–æ—Ç–∞ —Å —Ä–µ–∑—é–º–µ', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ó–∞–±—ã—Ç—å –º–µ–Ω—è', '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'))
    result = []

@router.message(Command('clear'))
async def clear_all(message: Message, state: FSMContext):
    await state.clear()
    global filtered_vacancies, result, roles_pages, filtered_pages, city_pages
    city_pages = 0
    filtered_pages = 0
    roles_pages = 0
    filtered_vacancies = []
    result = []
    await message.bot.send_photo(chat_id=message.from_user.id, photo=FSInputFile('static/hh.jpg'),
                                 caption='üåê–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:\n'
                                         'üîç –ü–æ–∏—Å–∫ –í–∞–∫–∞–Ω—Å–∏–π - –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã, —É–∫–∞–∑–∞–≤ –∂–µ–ª–∞–µ–º—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞'
                                         '\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ù–∞—Å—Ç—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –∏ —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.'
                                         '\nüìÑ –†–∞–±–æ—Ç–∞ —Å –†–µ–∑—é–º–µ - –£–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏–º–∏ —Ä–µ–∑—é–º–µ, –æ–±–Ω–æ–≤–ª—è–π –∏—Ö, –≤–∫–ª—é—á–∞–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.\n'
                                         'üö´ –ó–∞–±—ã—Ç—å –ú–µ–Ω—è - –£–¥–∞–ª–∏ –≤—Å—é —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.'
                                         '\n‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è –°–≤—è–∑—å - –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∑—ã–≤—ã —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞.'
                                         '\nü§ñ –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É.',
                                 reply_markup=inline_keyboard.create_inline_kb(2, '–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π', '–†–∞–±–æ—Ç–∞ —Å —Ä–µ–∑—é–º–µ', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ó–∞–±—ã—Ç—å –º–µ–Ω—è', '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'))